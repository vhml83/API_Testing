{
	"info": {
		"_postman_id": "518da309-4f9c-4a08-8ad1-a2535ee4cb97",
		"name": "Practica_4_Tienda_Mascotas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10031693"
	},
	"item": [
		{
			"name": "post /AddNewPet - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    var responseId = pm.response.text().split(':')[1];\r",
							"    responseId = responseId.split(',')[0];\r",
							"    pm.collectionVariables.set(\"petId\", responseId);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has an Id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet name equals Request pet name\", function () {\r",
							"    var collectionPetName = pm.collectionVariables.get(\"petName\");\r",
							"    var responsePetName = pm.response.json().name;\r",
							"    pm.expect(responsePetName).to.equal(collectionPetName);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet status equals Request pet status\", function () {\r",
							"    var collectionPetStatus = pm.collectionVariables.get(\"petStatus\");\r",
							"    var responsePetStatus = pm.response.json().status;\r",
							"    pm.expect(responsePetStatus).to.equal(collectionPetStatus);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.collectionVariables.set(\"petName\", randomName);\r",
							"\r",
							"var status = ['available', 'pending', 'sold'];\r",
							"var random = Math.floor(Math.random() * 3);\r",
							"pm.collectionVariables.unset(\"petStatus\");\r",
							"pm.collectionVariables.set(\"petStatus\", status[random]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"id\": 0,\r\n\t\"category\": {\r\n\t\t\"id\": 0,\r\n\t\t\"name\": \"string\"\r\n\t},\r\n\t\"name\": \"{{petName}}\",\r\n\t\"photoUrls\": [\r\n\t\t\"string\"\r\n\t],\r\n\t\"tags\": [{\r\n\t\t\"id\": 0,\r\n\t\t\"name\": \"string\"\r\n\t}],\r\n\t\"status\": \"{{petStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{baseURL}}/pet",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "get /GetPetByID - 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has an Id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet id equals Query Param id\", function () {\r",
							"    var collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"    var responsePetId = pm.response.text().split(':')[1];\r",
							"    responsePetId = responsePetId.split(',')[0];\r",
							"    pm.expect(responsePetId).to.equal(collectionPetId);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet name equals Request pet name\", function () {\r",
							"    var collectionPetName = pm.collectionVariables.get(\"petName\");\r",
							"    var responsePetName = pm.response.json().name;\r",
							"    pm.expect(responsePetName).to.equal(collectionPetName);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet status equals Request pet status\", function () {\r",
							"    var collectionPetStatus = pm.collectionVariables.get(\"petStatus\");\r",
							"    var responsePetStatus = pm.response.json().status;\r",
							"    pm.expect(responsePetStatus).to.equal(collectionPetStatus);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post /PartialUpdatePet - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a Code\", function () {\r",
							"    pm.expect(pm.response.json().code).to.exist;\r",
							"    pm.expect(pm.response.json().code).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet id equals Query Param id\", function () {\r",
							"    var collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"    var responsePetId = pm.response.json().message;\r",
							"    pm.expect(responsePetId).to.equal(collectionPetId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.collectionVariables.set(\"petName\", randomName);\r",
							"\r",
							"var status = ['available', 'pending', 'sold'];\r",
							"var random = Math.floor(Math.random() * 3);\r",
							"pm.collectionVariables.unset(\"petStatus\");\r",
							"pm.collectionVariables.set(\"petStatus\", status[random]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{petName}}",
							"type": "text"
						},
						{
							"key": "status",
							"value": "{{petStatus}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get /GetPetAfterUpdate - 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has an Id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet id equals Query Param id\", function () {\r",
							"    var collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"    var responsePetId = pm.response.text().split(':')[1];\r",
							"    responsePetId = responsePetId.split(',')[0];\r",
							"    pm.expect(responsePetId).to.equal(collectionPetId);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet name equals Request pet name\", function () {\r",
							"    var collectionPetName = pm.collectionVariables.get(\"petName\");\r",
							"    var responsePetName = pm.response.json().name;\r",
							"    pm.expect(responsePetName).to.equal(collectionPetName);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet status equals Request pet status\", function () {\r",
							"    var collectionPetStatus = pm.collectionVariables.get(\"petStatus\");\r",
							"    var responsePetStatus = pm.response.json().status;\r",
							"    pm.expect(responsePetStatus).to.equal(collectionPetStatus);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post /UploadImage - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a Code\", function () {\r",
							"    pm.expect(pm.response.json().code).to.exist;\r",
							"    pm.expect(pm.response.json().code).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().code).equals(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a 'unknown' Type\", function () {\r",
							"    pm.expect(pm.response.json().type).to.exist;\r",
							"    pm.expect(pm.response.json().type).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().type).equals(\"unknown\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a message\", function () {\r",
							"    pm.expect(pm.response.json().message).to.exist;\r",
							"    pm.expect(pm.response.json().message).to.include('neapolitan-mastiff.jpg');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "neapolitan-mastiff.jpg"
						}
					]
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}/uploadImage",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}",
						"uploadImage"
					]
				}
			},
			"response": []
		},
		{
			"name": "put /FullUpdatePet -200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.collectionVariables.set(\"petName\", randomName);\r",
							"\r",
							"var status = ['available', 'pending', 'sold'];\r",
							"var random = Math.floor(Math.random() * 3);\r",
							"pm.collectionVariables.unset(\"petStatus\");\r",
							"pm.collectionVariables.set(\"petStatus\", status[random]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has an Id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet name equals Request pet name\", function () {\r",
							"    var collectionPetName = pm.collectionVariables.get(\"petName\");\r",
							"    var responsePetName = pm.response.json().name;\r",
							"    pm.expect(responsePetName).to.equal(collectionPetName);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet status equals Request pet status\", function () {\r",
							"    var collectionPetStatus = pm.collectionVariables.get(\"petStatus\");\r",
							"    var responsePetStatus = pm.response.json().status;\r",
							"    pm.expect(responsePetStatus).to.equal(collectionPetStatus);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{petId}}\",\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{petName}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"{{petStatus}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{baseURL}}/pet",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "get /GetPetAfterUpdate - 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has an Id\", function () {\r",
							"    pm.expect(pm.response.json().id).to.exist;\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet id equals Query Param id\", function () {\r",
							"    var collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"    var responsePetId = pm.response.text().split(':')[1];\r",
							"    responsePetId = responsePetId.split(',')[0];\r",
							"    pm.expect(responsePetId).to.equal(collectionPetId);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet name equals Request pet name\", function () {\r",
							"    var collectionPetName = pm.collectionVariables.get(\"petName\");\r",
							"    var responsePetName = pm.response.json().name;\r",
							"    pm.expect(responsePetName).to.equal(collectionPetName);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet status equals Request pet status\", function () {\r",
							"    var collectionPetStatus = pm.collectionVariables.get(\"petStatus\");\r",
							"    var responsePetStatus = pm.response.json().status;\r",
							"    pm.expect(responsePetStatus).to.equal(collectionPetStatus);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get /GetPetByStatus - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response body\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"\r",
							"pm.test(\"Response body contains PetId\", () => {\r",
							"    _.each(jsonData.id, (item) => {\r",
							"        pm.expect(item).to.include(collectionPetId)\r",
							"    })\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{baseURL}}/pet/findByStatus?status={{petStatus}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "{{petStatus}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete /DeletePet - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a Code\", function () {\r",
							"    pm.expect(pm.response.json().code).to.exist;\r",
							"    pm.expect(pm.response.json().code).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().code).equals(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response pet id equals Query Param id\", function () {\r",
							"    var collectionPetId = pm.collectionVariables.get(\"petId\");\r",
							"    var responsePetId = pm.response.json().message;\r",
							"    pm.expect(responsePetId).to.equal(collectionPetId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get /GetPetAfterDelete - 404",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"     pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a Code equal to '1'\", function () {\r",
							"    pm.expect(pm.response.json().code).to.exist;\r",
							"    pm.expect(pm.response.json().code).to.be.a(\"number\");\r",
							"    pm.expect(pm.response.json().code).equals(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a 'error' Type\", function () {\r",
							"    pm.expect(pm.response.json().type).to.exist;\r",
							"    pm.expect(pm.response.json().type).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().type).equals(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has a 'Pet not found' Message\", function () {\r",
							"    pm.expect(pm.response.json().message).to.exist;\r",
							"    pm.expect(pm.response.json().message).to.be.a(\"string\");\r",
							"    pm.expect(pm.response.json().message).equals(\"Pet not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://{{baseURL}}/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "petId",
			"value": ""
		},
		{
			"key": "petName",
			"value": ""
		},
		{
			"key": "petStatus",
			"value": "available",
			"type": "string"
		}
	]
}